name: lava-trigger

on:
  workflow_call:
    outputs:
      summary_content:
        value: ${{ jobs.collect-summary.outputs.summary_content }}

    inputs:
      kernel_download_url:
        description: '内核下载链接'
        type: string
        required: true
      kernel_md5sum:
        description: '内核md5sum'
        type: string
        required: true

      rootfs_download_url:
        description: 'rootfs下载链接'
        required: false
        type: string

      initramfs_download_url:
        description: 'initramfs下载链接'
        required: false
        type: string
      
      initramfs_md5sum:
        description: 'initramfs md5sum'
        required: false
        type: string

      testcase_repo:
        description: 'lava 仓库地址, {owner}/{repo}'
        required: true
        type: string

      testcase_ref:
        description: lava 仓库分支 #'lava 仓库sha值'
        required: false
        type: string
        default: main

      lava_template:
        description: 'lava测试模板'
        required: true
        type: string

      testcase_path:
        description: '需要执行的用例yaml 文件路径'
        required: true
        type: string

      # testcase_params:
      #   description: '测试用例参数,[key=value ...]'
      #   type: string
      #   required: false
    
    secrets:
      lava_token:
        required: true

env:
  testcase_repo: ${{ inputs.testcase_repo }}
  testcase_ref: ${{ inputs.testcase_ref }}
  kernel_download_url: ${{ inputs.kernel_download_url }}
  initramfs_download_url: ${{ inputs.initramfs_download_url }}
  lava_template: ${{ inputs.lava_template }}
  testcase_path: ${{ inputs.testcase_path }}
  lava_server: lava.oerv.ac.cn
  lava_admin_token: ${{ secrets.lava_token }}
  
jobs:
  lava-trigger:
    outputs:
      lava_jobid: ${{ steps.run_lava_check.outputs.lava_jobid }}
      testitem_name: ${{ steps.gen_var.outputs.testitem_name }}
      rootfs_download_url: ${{ steps.gen_var.outputs.rootfs_download_url }}
    runs-on: 'ubuntu-latest'

    steps:
      - uses: actions/checkout@v4
        with:
          repository: ${{ inputs.testcase_repo }}
          ref: ${{ inputs.testcase_ref || 'main' }}

      - name: install depends
        run: |
          sudo apt-get update
          sudo apt-get install lavacli yq

      - name: gen var
        id: gen_var
        env:
          github_repo: ${{ github.repository }}
          event_name: ${{ github.event_name }}
          issue_id: ${{ github.event.pull_request.number || github.event.issue.number }}
          comment_id: ${{ github.event.comment.id }}
          input_rootfs_download_url: ${{ inputs.rootfs_download_url }}
          input_kernel_md5sum: ${{ inputs.kernel_md5sum }}
          input_initramfs_md5sum: ${{ inputs.initramfs_md5sum }}
        run: |
          echo "ssh_port=$(od -An -N2 -i /dev/urandom | awk -v min=10000 -v max=20000 '{print min + ($1 % (max - min + 1))}')" >> $GITHUB_OUTPUT
          repo_name=${github_repo#*/}
          echo "repo_name=$repo_name" >> $GITHUB_OUTPUT
          job_name="${github_repo/\//_}_${event_name}_${issue_id:-"$(date +"%Y%m%d")"}_${comment_id:+_$comment_id}"
          echo "job_name=$job_name" >> $GITHUB_OUTPUT
          device_type="$(yq -r .device_type "$lava_template")"
          echo "testitem_name=${job_name}_$(echo "${testcase_path}" | awk -F'/' '{print $2}')_${device_type}" >> $GITHUB_OUTPUT
          rootfs_download_url="${input_rootfs_download_url}"
          if [ -z "$rootfs_download_url" ]; then
            if [ "$device_type" = qemu ]; then
              rootfs_download_url="https://fast-mirror.isrc.ac.cn/openeuler-sig-riscv/openEuler-RISC-V/RVCK/openEuler24.03-LTS-SP1/openeuler-rootfs.img.zst"
            else
              rootfs_download_url="https://fast-mirror.isrc.ac.cn/openeuler-sig-riscv/openEuler-RISC-V/RVCK/openEuler24.03-LTS-SP1/openeuler-rootfs.tar.gz"
            fi
          fi

          kernel_md5sum="$input_kernel_md5sum"
          if [ -z "$kernel_md5sum" ]; then
              kernel_md5sum=$(curl "${kernel_download_url}.md5sum" 2>/dev/null | awk '{print $1}' || echo "")
          fi
          initramfs_md5sum="$input_initramfs_md5sum"
          if [ -z "$initramfs_md5sum" ]; then
              initramfs_md5sum=$(curl "${initramfs_download_url}.md5sum" 2>/dev/null | awk '{print $1}' || echo "")
          fi

          echo "rootfs_download_url=$rootfs_download_url" >> $GITHUB_OUTPUT
          echo "kernel_md5sum=$kernel_md5sum" >> $GITHUB_OUTPUT
          echo "initramfs_md5sum=$initramfs_md5sum" >> $GITHUB_OUTPUT

      - name: setup_lava_template
        shell: python3 {0}
        env:
          ssh_port: ${{ steps.gen_var.outputs.ssh_port }}
          job_name: ${{ steps.gen_var.outputs.job_name }}
          testitem_name: ${{ steps.gen_var.outputs.testitem_name }}
          rootfs_download_url: ${{ steps.gen_var.outputs.rootfs_download_url }}
          repo_name: ${{ steps.gen_var.outputs.repo_name }}
        run: |
          import yaml
          import os

          testcase_repo = os.getenv("testcase_repo", "")
          assert testcase_repo, "Testcase repository is not set"

          testcase_ref = os.getenv("testcase_ref", "")

          lava_template = os.getenv("lava_template")
          assert lava_template, "Lava template is not set"

          testcase_path = os.getenv("testcase_path")
          assert testcase_path, "Testcase URL is not set"

          job_name = os.getenv("job_name")
          assert job_name, "Job name is not set"

          testitem_name = os.getenv("testitem_name")
          assert testitem_name, "testitem_name is not set"

          ssh_port = os.getenv("ssh_port")
          assert ssh_port, "SSH port is not set"

          kernel_download_url = os.getenv("kernel_download_url")
          assert kernel_download_url, "Kernel download URL is not set"

          kernel_md5sum = os.getenv("kernel_md5sum", "")

          rootfs_download_url = os.getenv("rootfs_download_url")
          assert rootfs_download_url, "Rootfs download URL is not set"

          repo_name = os.getenv("repo_name")
          assert repo_name, "repo name is not set"

          initramfs_download_url = os.getenv("initramfs_download_url")
          assert initramfs_download_url, "Initramfs download URL is not set"

          initramfs_md5sum = os.getenv("initramfs_md5sum")

          content = open(lava_template, "r").read()\
                    .replace("${job_name}", job_name)\
                    .replace("${kernel_image_url}", kernel_download_url)\
                    .replace("${rootfs_image_url}", rootfs_download_url)\
                    .replace("${testcase_repo}", f"https://github.com/{testcase_repo}.git")\
                    .replace("${testitem_name}", testitem_name)\
                    .replace("${testcase_path}", testcase_path)

          data = yaml.safe_load(content)

          # qemu 需要设置ssh port
          if data['device_type'] == 'qemu' and 'context' in data and 'extra_options' in data['context']:
              data['context']['extra_options'] = [i.replace('hostfwd=tcp::10001-:22', f'hostfwd=tcp::{ssh_port}-:22') for i in list(data['context']['extra_options'])]

          # add kernel md5sum
          if kernel_md5sum:
              data['actions'][0]['deploy']['images']['kernel']['md5sum'] = kernel_md5sum

          # rvck 需要initramfs
          if repo_name == "rvck":
              data['context']['extra_options'] = [i.replace('root=/dev/vda', 'root=/dev/vdb') for i in list(data['context']['extra_options'])]
              data['actions'][0]['deploy']['images']['initrd'] = {'image_arg': '-initrd {initrd}', 'url': initramfs_download_url}
              if initramfs_md5sum:
                  data['actions'][0]['deploy']['images']['initrd']['md5sum'] = initramfs_md5sum

          if len(testcase_ref):
              data['actions'][2]['test']['definitions'][0]['revision'] = testcase_ref

          data['actions'][2]['test']['definitions'][0].pop('parameters', None)

          with open(lava_template, 'w') as f:
              f.write(yaml.dump(data, sort_keys=False))

      - name: run lava check
        id: run_lava_check
#        env:
#          job_name: ${{ steps.gen_var.outputs.job_name }}
        shell: bash
        run: |
          echo "=========== edited lava template ==========="
          cat $lava_template
          echo "============================================"

          set -ex
          lava_jobid=$(lavacli --uri https://${lava_admin_token}@${lava_server}/RPC2/ jobs submit ${lava_template})
          if [[ ! "$lava_jobid" =~ ^[0-9]+$ ]]; then echo "$lava_jobid"; exit 1; fi
          echo "lava_jobid=$lava_jobid" >> $GITHUB_OUTPUT

  lava-result:
    needs: [lava-trigger]
    if: ${{ needs.lava-trigger.outputs.lava_jobid }}
    runs-on: 'ubuntu-latest'
    env:
      lava_jobid: ${{ needs.lava-trigger.outputs.lava_jobid }}
    strategy:
      max-parallel: 1
      matrix:
        wait: [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40]
    steps:
      - id: check-result
        uses: actions/cache@v4.2.3
        with:
          path: is_lava_finish.txt
          # An explicit key for restoring and saving the cache
          key: is_lava_finish-${{ github.run_id	}}-${{ needs.lava-trigger.outputs.lava_jobid }}
          # Check if a cache entry exists for the given input(s) (key, restore-keys) without downloading the cache
          lookup-only: true
      
      - name: install depends
        if: ${{ steps.check-result.outputs.cache-hit == false }}
        run: |
          sudo apt-get update
          sudo apt-get install lavacli

      - name: wait-result ${{ matrix.wait }}
        id: wait-result
        if: ${{ steps.check-result.outputs.cache-hit == false }}
        continue-on-error: true
        run: |
          set -x
          while true; do
            lava_state=$(lavacli --uri https://${lava_admin_token}@${lava_server}/RPC2/ jobs show ${lava_jobid} | grep 'state ' | awk '{print $NF}')
            if [ "$lava_state" = 'Running' ] || [ "$lava_state" = Submitted ] || [ "$lava_state" = Scheduled ]; then
              lavacli --uri https://${lava_admin_token}@${lava_server}/RPC2/ jobs wait --polling 60 ${lava_jobid} || true
            else
              echo "is_lava_finish=true" >> $GITHUB_OUTPUT
              echo "$lava_state" > is_lava_finish.txt
              break
            fi
          done

      - name: set-result
        if: ${{ steps.wait-result.outputs.is_lava_finish }}
        uses: actions/cache@v4.2.3
        with:
          key: is_lava_finish-${{ github.run_id	}}-${{ needs.lava-trigger.outputs.lava_jobid }}
          path: is_lava_finish.txt
          
  on-cancel:
    runs-on: 'ubuntu-latest'
    needs: [lava-trigger, lava-result]
    if: ${{ cancelled() }}
    env: 
      lava_jobid: ${{ needs.lava-trigger.outputs.lava_jobid }}
    steps:
      - run: |
          sudo apt-get update
          sudo apt-get install lavacli
          set -x
          if [ "$lava_jobid" != "" ]; then
            lavacli --uri https://${lava_admin_token}@${lava_server}/RPC2/ jobs cancel ${lava_jobid}
          fi

  collect-summary:
    outputs:
      summary_content: ${{ steps.summary.outputs.summary_content || steps.onfailure.outputs.summary_content }}
    runs-on: 'ubuntu-latest'
    needs: [lava-trigger, lava-result]
    if: ${{ !cancelled() }}
    env: 
      lava_jobid: ${{ needs.lava-trigger.outputs.lava_jobid }}
      testitem_name: ${{ needs.lava-trigger.outputs.testitem_name }}
      rootfs_download_url: ${{ needs.lava-trigger.outputs.rootfs_download_url }}
    steps:
      - name: install depends
        run: |
          sudo apt-get update
          sudo apt-get install lavacli

      - id: onfailure
        if: ${{ !needs.lava-trigger.outputs.lava_jobid }}
        run: |
          cat > summary_content <<EEE
          ## LAVA Check

          ---
          ***lava 执行失败.***
          ---
          EEE
          echo "summary_content<<EOF" >> $GITHUB_OUTPUT
          cat summary_content >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT


      - id: summary
        if: ${{ needs.lava-trigger.outputs.lava_jobid }}
        shell: bash
        run: |
          set -x
          lava_health=$(lavacli --uri https://${lava_admin_token}@${lava_server}/RPC2/ jobs show ${lava_jobid} | grep 'Health ' | awk '{print $NF}')
          lava_results=$(lavacli --uri https://${lava_admin_token}@${lava_server}/RPC2/ results ${lava_jobid} "0_$testitem_name" || echo "")

          declare -A cnt_result_status=()
          while read -r st; do
            if [ "$st" = "" ]; then continue; fi
            cnt_result_status[$st]=$((cnt_result_status[$st] + 1))
          done < <(awk '{print $3}' <<< "$lava_results")

          result_status_desc=""
          for st in "${!cnt_result_status[@]}"; do
            result_status_desc+="${result_status_desc:+, }$st: ${cnt_result_status[$st]}"
          done

          cat > summary << EEE
          ## LAVA Check
          
          ### args:
          
          - testcase_repo: ${testcase_repo}
          - testcase_ref: ${testcase_ref}
          - lava_template: ${lava_template}
          - testcase_path: ${testcase_path}
          - testitem_name: ${testitem_name}
          - kernel_download_url: ${kernel_download_url}
          - initramfs_download_url: ${initramfs_download_url}
          - rootfs_download_url: ${rootfs_download_url}
          
          ### result:
          
          $(if [ "${lava_health}" = Complete ]; then echo "Lava check done!"; else echo "Lava check fail!"; fi) lava log: https://${lava_server}/scheduler/job/${lava_jobid}

          lava result count: $result_status_desc

          EEE

          echo "summary_content<<EOF" >> $GITHUB_OUTPUT
          cat summary >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          cat > $GITHUB_STEP_SUMMARY << EEE
          $(cat summary)
          
          ### detail result:

          \`\`\`log
          $lava_results
          \`\`\`
          EEE
