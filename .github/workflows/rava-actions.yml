name: RAVA actions

on:
  workflow_call:   
    secrets:
      lava_token:
        required: true

jobs:
  parse-request:
    runs-on: 'ubuntu-latest'
    outputs:
      lava_template: ${{ steps.parse.outputs.lava_template }}
      lava_testcase_path: ${{ steps.parse.outputs.lava_testcase_path }}
      testcase_repo: ${{ steps.parse.outputs.testcase_repo }}
      testcase_ref: ${{ steps.parse.outputs.testcase_ref }}
      summary: ${{ steps.parse.outputs.summary || steps.onfailure.outputs.summary }}
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GH_REPO: ${{ github.repository }}
      event_name: ${{ github.event_name }}
      event_info: ${{ toJson(github.event) }}
    steps:
      - id: parse
        run: |
          function parse_pr() {
            title="$1"
            # title=[lava-job-template/qemu/qemu.yaml]-[lava-testcases/common-test/ltp/ltp.yaml]: xxx
            if [ "$lava_template" = "" ]; then
              lava_template=$(echo "$title" | awk -F'\\]-\\[' '{print $1}')
              lava_template="${lava_template#\[}"
              lava_template="${lava_template%\]*}"
            fi
            if [ "$lava_testcase_path" = "" ]; then
              lava_testcase_path=$(echo "$title" | awk -F'\\]-\\[' '{print $2}')
              lava_testcase_path="${lava_testcase_path#\[}"
              lava_testcase_path="${lava_testcase_path%\]*}"
            fi

            ## pr 强制使用当前分支，不允许指定 / issue_comment略过
            if [ "${{ github.event.pull_request.head.sha }}" != "" ]; then
              testcase_repo=${{ github.event.pull_request.head.repo.full_name }}
              testcase_ref=${{ github.event.pull_request.head.sha }}
            fi
          }

          function parse_comment() {
            comment_body="$1"
            if [ "${comment_body:0:6}" != '/check' ]; then
              return -1
            fi
            lava_template="$(echo "$comment_body" | awk -F'lava_template=' '{print $2}' | awk '{print $1}')"
            lava_testcase_path="$(echo "$comment_body" | awk -F'testcase_path=' '{print $2}' | awk '{print $1}')"
          }
          
          set -x
          if [ "$event_name" = 'pull_request' ] || [ "$event_name" = 'pull_request_target' ]; then
            parse_pr "${{ github.event.pull_request.title }}"
          elif [ "$event_name" = 'issues' ]; then
            parse_comment "${{ github.event.issue.body }}"
          elif [ "$event_name" = 'issue_comment' ]; then
            parse_comment "${{ github.event.comment.body }}"
            if [ "${{ github.event.issue.pull_request }}" != "" ]; then
              parse_pr "${{ github.event.issue.title }}"
            fi
          fi
          set +x
          testcase_repo=${testcase_repo:-${{ github.repository }}}

          echo "lava_template=$lava_template" >> $GITHUB_OUTPUT
          echo "lava_testcase_path=$lava_testcase_path" >> $GITHUB_OUTPUT
          echo "testcase_repo=${testcase_repo}" >> $GITHUB_OUTPUT
          echo "testcase_ref=${testcase_ref}" >> $GITHUB_OUTPUT
          log_url=$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID
          cat > summary << EOF
          ---
          **开始检查, log: [$log_url]($log_url)**
          
          |args|value|
          |:-:|:-:|
          |repository | $GH_REPO |
          |LAVA Template | $lava_template |
          |Testcase path | $lava_testcase_path |
          |Testcase repo | $testcase_repo |
          |Testcase ref | $testcase_ref |
          ---
          EOF

          echo "summary<<EOF" >> $GITHUB_OUTPUT
          cat summary >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          cat summary >> $GITHUB_STEP_SUMMARY
      - id: onfailure
        if: ${{ failure() }}
        run: |
          log_url=$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID
          cat > summary << EOF
          ---
          参数解析失败, log: [$log_url]($log_url)
          ---
          EOF
          echo "summary<<EOF" >> $GITHUB_OUTPUT
          cat summary >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  
  pre-check:
    needs: [parse-request]
    if: ${{ !cancelled() && github.event_name != 'pull_request_target' }}
    permissions:
      issues: write
      pull-requests: write
    uses: ./.github/workflows/update-status.yml
    secrets: 
      gh_token: ${{ secrets.github_token }}
    with:
      repo: ${{ github.repository }}
      event_name: ${{ github.event_name }}
      event_id: ${{ github.event_name == 'issue_comment' && github.event.comment.id || github.event.issue.number }}
      append_content: ${{ needs.parse-request.outputs.summary }}

  
  run-lava-check:
    needs: [parse-request]
    if: ${{ needs.parse-request.outputs.lava_template && needs.parse-request.outputs.lava_testcase_path }}
    uses: ./.github/workflows/lava-trigger.yml
    secrets:
      lava_token: ${{ secrets.lava_token }}
    with:
      kernel_download_url: 'https://fast-mirror.isrc.ac.cn/openeuler-sig-riscv/openEuler-RISC-V/RVCK/OERV-RVCI/rvck-olk/1/Image'
      testcase_repo: ${{ needs.parse-request.outputs.testcase_repo }}
      testcase_ref: ${{ needs.parse-request.outputs.testcase_ref }}
      lava_template: ${{ needs.parse-request.outputs.lava_template }}
      testcase_path: ${{ needs.parse-request.outputs.lava_testcase_path }}
  
  collect-result:
    needs: [run-lava-check]
    if: ${{ !cancelled() }}
    permissions:
      issues: write
      pull-requests: write
    uses: ./.github/workflows/update-status.yml
    secrets: 
      gh_token: ${{ secrets.github_token }}
    with:
      repo: ${{ github.repository }}
      event_name: ${{ github.event_name }}
      event_id: ${{ github.event_name == 'issue_comment' && github.event.comment.id || github.event.issue.number }}
      append_content: |
        # RAVA actions result

        ${{ needs.run-lava-check.outputs.summary_content }}
